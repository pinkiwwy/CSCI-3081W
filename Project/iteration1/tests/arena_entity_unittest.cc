/* STUDENTS:  DO NOT EDIT THIS FILE.  INSTEAD, MODIFY YOUR OWN PROJECT
 * CODE TO FIT THE SPECIFICATION GIVEN BY THE TESTS IN THIS FILE.
 *
 * If you DO modify it, we overwrite it with a fresh version from our repo
 * when grading, so you can't use it to fudge the tests anyway.
 *
 * This file is used by the CS3081W auto-grading system.
 *
 * Please note, the assessment tests for grading, will use the same include
 * files, class names, and function names for accessing students' code that you
 * find in this file.  So students, if you write your code so that it passes
 * these feedback tests, you can be assured that the auto-grader will at least
 * be able to properly link with your code.
 */

/*******************************************************************************
 * Includes
 ******************************************************************************/
#include <gtest/gtest.h>
#include <gmock/gmock.h>
#include "../src/arena_entity.h"

#ifdef ARENA_ENTITY_TEST

/*******************************************************************************
 * Class Definitions
 ******************************************************************************/
class FakeArenaEntity : public csci3081::ArenaEntity {
 public:
  FakeArenaEntity(double radius, const csci3081::Position& pos,
              const nanogui::Color& color) :
      ArenaEntity(radius, pos, color) {}

  MOCK_CONST_METHOD0(get_name, std::string());
};

/*******************************************************************************
 * Test Cases
 ******************************************************************************/
TEST(ArenaEntity, Sanity) {
  csci3081::Position pos(0, 0);
  const nanogui::Color col(255, 255, 255, 255);
  double radius = 1.0;
  csci3081::Position pos2(2, 2);
  const nanogui::Color col2(0, 0, 0, 255);
  FakeArenaEntity ae(radius, pos, col);

  ON_CALL(ae, get_name()).WillByDefault(testing::Return("Fake Entity"));

  EXPECT_EQ(ae.get_color(), col) << "FAIL: Bad color";
  EXPECT_EQ(ae.get_pos(), pos) << "FAIL: Bad position";
  EXPECT_EQ(ae.radius(), radius) << "FAIL: Bad radius";
  EXPECT_EQ(ae.get_name(), "Fake Entity") << "FAIL: Bad radius";
  ae.set_pos(pos2);
  ae.set_color(col2);
  EXPECT_EQ(ae.get_color(), col2) << "FAIL: Update color";
  EXPECT_EQ(ae.get_pos(), pos2) << "FAIL: Update position";
}

TEST(ArenaEntity, Reset) {
  csci3081::Position pos(0, 0);
  const nanogui::Color col(255, 255, 255, 255);
  double radius = 1.0;
  csci3081::Position pos2(2, 2);
  const nanogui::Color col2(0, 0, 0, 255);
  FakeArenaEntity ae(radius, pos, col);

  ON_CALL(ae, get_name()).WillByDefault(testing::Return("Fake Entity"));
  ae.set_pos(pos2);
  ae.set_color(col2);
  ae.Reset();
  EXPECT_EQ(ae.get_color(), col) << "FAIL: Color reset";
  EXPECT_EQ(ae.get_pos(), pos) << "FAIL: Position Reset";
}

#endif /* ARENA_ENTITY_TEST */
