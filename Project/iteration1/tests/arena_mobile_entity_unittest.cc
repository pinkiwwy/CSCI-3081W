/* STUDENTS:  DO NOT EDIT THIS FILE.  INSTEAD, MODIFY YOUR OWN PROJECT
 * CODE TO FIT THE SPECIFICATION GIVEN BY THE TESTS IN THIS FILE.
 *
 * If you DO modify it, we overwrite it with a fresh version from our repo
 * when grading, so you can't use it to fudge the tests anyway.
 *
 * This file is used by the CS3081W auto-grading system.
 *
 * Please note, the assessment tests for grading, will use the same include
 * files, class names, and function names for accessing students' code that you
 * find in this file.  So students, if you write your code so that it passes
 * these feedback tests, you can be assured that the auto-grader will at least
 * be able to properly link with your code.
 */

/*******************************************************************************
 * Includes
 ******************************************************************************/
#include <gtest/gtest.h>
#include <gmock/gmock.h>
#include "../src/arena_mobile_entity.h"

#ifdef ARENA_MOBILE_ENTITY_TEST

/*******************************************************************************
 * Class Definitions
 ******************************************************************************/
class FakeMobileEntity : public csci3081::ArenaMobileEntity {
 public:
  FakeMobileEntity(double radius, double collision_delta,
                   const csci3081::Position& pos, const nanogui::Color& color) :
      ArenaMobileEntity(radius, collision_delta, pos, color) {}

  MOCK_CONST_METHOD0(get_name, std::string());
  MOCK_CONST_METHOD0(heading_angle, double());
  MOCK_CONST_METHOD0(speed, double());
  MOCK_METHOD1(heading_angle, void(double));
  MOCK_METHOD1(speed, void(double));
  MOCK_METHOD1(Accept, void(const csci3081::EventRecharge* const));
  MOCK_METHOD1(Accept, void(const csci3081::EventCollision* const));
};

TEST(ArenaMobileEntity, Sanity) {
  csci3081::Position pos(0, 0);
  const nanogui::Color col(255, 255, 255, 255);
  double collision_delta = 3.0;
  double radius = 1.0;
  FakeMobileEntity ame(radius, collision_delta, pos, col);
  EXPECT_EQ(ame.collision_delta(),
          collision_delta) << "FAIL: Bad collision delta";
}

TEST(ArenaMobileEntity, TimestepUpdate) {
  csci3081::Position pos(0, 0);
  const nanogui::Color col(255, 255, 255, 255);
  double collision_delta = 3.0;
  double radius = 1.0;
  FakeMobileEntity ame(radius, collision_delta, pos, col);
  ON_CALL(ame, get_name()).WillByDefault(testing::Return("Fake Mobile Entity"));
  EXPECT_CALL(ame, heading_angle())
      .Times(3)
      .WillRepeatedly(testing::Return(90.0))
      .Times(3)
      .WillRepeatedly(testing::Return(45.0));

  EXPECT_CALL(ame, speed())
      .Times(3)
      .WillRepeatedly(testing::Return(5.0))
      .Times(3)
      .WillRepeatedly(testing::Return(2.0));

  ame.TimestepUpdate(1);
  EXPECT_EQ(ame.get_pos(), pos) << "Bad position update(1)";

  ame.TimestepUpdate(1);
  EXPECT_NE(ame.get_pos(), pos) << "Bad position update(1)";

  ame.Reset();
  EXPECT_NE(ame.get_pos(), pos) << "FAIL: Reset failure";

  ame.TimestepUpdate(10);
  EXPECT_NE(ame.get_pos(), pos) << "Bad position update(10)";
}

#endif /* ARENA_MOBILE_ENTITY_TEST */
