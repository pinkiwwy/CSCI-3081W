/* STUDENTS:  DO NOT EDIT THIS FILE.  INSTEAD, MODIFY YOUR OWN PROJECT
 * CODE TO FIT THE SPECIFICATION GIVEN BY THE TESTS IN THIS FILE.
 *
 * If you DO modify it, we overwrite it with a fresh version from our repo
 * when grading, so you can't use it to fudge the tests anyway.
 *
 * This file is used by the CS3081W auto-grading system.
 *
 * Please note, the assessment tests for grading, will use the same include
 * files, class names, and function names for accessing students' code that you
 * find in this file.  So students, if you write your code so that it passes
 * these feedback tests, you can be assured that the auto-grader will at least
 * be able to properly link with your code.
 */

/*******************************************************************************
 * Includes
 ******************************************************************************/
#include <gtest/gtest.h>
#include "../src/robot_motion_behavior.h"
#include "../src/robot.h"

/*******************************************************************************
 * Test Cases
 ******************************************************************************/
#ifdef PRIORIT1_TESTS

TEST(RobotMotionBehavior, UpdatePosition0) {
  csci3081::robot_params params;
  csci3081::Robot r(&params);
  r.heading_angle(0.0);
  r.speed(1.0);
  csci3081::RobotMotionBehavior rmb;

  rmb.UpdatePosition(&r, 1);
  EXPECT_DOUBLE_EQ(r.get_pos().x(), 1.0) <<
      "FAIL: Bad position update for X: 0 degree trajectory";
  EXPECT_DOUBLE_EQ(r.get_pos().y(), 0.0) <<
      "FAIL: Bad position update for Y: 0 degree trajectory";

  rmb.UpdatePosition(&r, 1);
  EXPECT_DOUBLE_EQ(r.get_pos().x(), 1.0) <<
      "FAIL: Bad position update for X: 0 degree trajectory";
  EXPECT_DOUBLE_EQ(r.get_pos().y(), 0.0) <<
      "FAIL: Bad position update for Y: 0 degree trajectory";

  r.Reset();
  EXPECT_EQ(r.get_pos(), csci3081::Position(0, 0)) << "FAIL: Reset failure";

  rmb.UpdatePosition(&r, 10);
  EXPECT_DOUBLE_EQ(r.get_pos().x(), 10.0) <<
      "FAIL: Bad position update for X: 0 degree trajectory";
  EXPECT_DOUBLE_EQ(r.get_pos().y(), 1.0) <<
      "FAIL: Bad position update for Y: 0 degree trajectory";
}

TEST(RobotMotionBehavior, UpdatePosition90) {
  csci3081::robot_params params;
  csci3081::Robot r(&params);
  r.heading_angle(90.0);
  r.speed(1.0);
  csci3081::RobotMotionBehavior rmb;

  rmb.UpdatePosition(&r, 1);
  EXPECT_DOUBLE_EQ(r.get_pos().x(), 0.0) <<
      "FAIL: Bad position update for X: 90 degree trajectory";
  EXPECT_DOUBLE_EQ(r.get_pos().y(), 1.0) <<
      "FAIL: Bad position update for Y: 90 degree trajectory";

  rmb.UpdatePosition(&r, 1);
  EXPECT_DOUBLE_EQ(r.get_pos().x(), 0.0) <<
      "FAIL: Bad position update for X: 90 degree trajectory";
  EXPECT_DOUBLE_EQ(r.get_pos().y(), 1.0) <<
      "FAIL: Bad position update for Y: 90 degree trajectory";

  r.Reset();
  EXPECT_EQ(r.get_pos(), csci3081::Position(0, 0)) << "FAIL: Reset failure";

  rmb.UpdatePosition(&r, 10);
  EXPECT_DOUBLE_EQ(r.get_pos().x(), 0.0) <<
      "FAIL: Bad position update for X: 90 degree trajectory";
  EXPECT_DOUBLE_EQ(r.get_pos().y(), 10.0) <<
      "FAIL: Bad position update for Y: 90 degree trajectory";
}

TEST(RobotMotionBehavior, UpdatePosition180) {
  csci3081::robot_params params;
    params.pos = csci3081::Position(10, 0);

  csci3081::Robot r(&params);
  r.heading_angle(180.0);
  r.speed(1.0);
  csci3081::RobotMotionBehavior rmb;

  rmb.UpdatePosition(&r, 1);
  EXPECT_DOUBLE_EQ(r.get_pos().x(), 9.0) <<
      "FAIL: Bad position update for X: 180 degree trajectory";
  EXPECT_DOUBLE_EQ(r.get_pos().y(), 0.0) <<
      "FAIL: Bad position update for Y: 180 degree trajectory";

  rmb.UpdatePosition(&r, 1);
  EXPECT_DOUBLE_EQ(r.get_pos().x(), 8.0) <<
      "FAIL: Bad position update for X: 180 degree trajectory";
  EXPECT_DOUBLE_EQ(r.get_pos().y(), 0.0) <<
      "FAIL: Bad position update for Y: 180 degree trajectory";

  r.Reset();
  EXPECT_EQ(r.get_pos(), csci3081::Position(10, 0)) << "FAIL: Reset failure";

  rmb.UpdatePosition(&r, 10);
  EXPECT_DOUBLE_EQ(r.get_pos().x(), 0.0) <<
      "FAIL: Bad position update for X: 180 degree trajectory";
  EXPECT_DOUBLE_EQ(r.get_pos().y(), 0.0) <<
      "FAIL: Bad position update for Y: 180 degree trajectory";
}

TEST(RobotMotionBehavior, UpdatePosition270) {
  csci3081::robot_params params;
  params.pos = csci3081::Position(0, 10);

  csci3081::Robot r(&params);
  r.heading_angle(270.0);
  r.speed(1.0);
  csci3081::RobotMotionBehavior rmb;

  rmb.UpdatePosition(&r, 1);;
  EXPECT_DOUBLE_EQ(r.get_pos().x(), 0.0) <<
      "FAIL: Bad position update for X: 270 degree trajectory";
  EXPECT_DOUBLE_EQ(r.get_pos().y(), 9.0) <<
      "FAIL: Bad position update for Y: 270 degree trajectory";

  rmb.UpdatePosition(&r, 1);;
  EXPECT_DOUBLE_EQ(r.get_pos().x(), 0.0) <<
      "FAIL: Bad position update for X: 270 degree trajectory";
  EXPECT_DOUBLE_EQ(r.get_pos().y(), 8.0) <<
      "FAIL: Bad position update for Y: 270 degree trajectory";

  r.Reset();
  EXPECT_EQ(r.get_pos(), csci3081::Position(10, 0)) << "FAIL: Reset failure";

  rmb.UpdatePosition(&r, 10);
  EXPECT_DOUBLE_EQ(r.get_pos().x(), 0.0) <<
      "FAIL: Bad position update for X: 270 degree trajectory";
  EXPECT_DOUBLE_EQ(r.get_pos().y(), 0.0) <<
      "FAIL: Bad position update for Y: 270 degree trajectory";
}

TEST(ArenaMobileEntity, UpdatePosition45) {
  csci3081::robot_params params;
  csci3081::Robot r(&params);
  csci3081::RobotMotionBehavior rmb;
  r.heading_angle(45.0);
  r.speed(1.0);

  rmb.UpdatePosition(&r, 1);;
  EXPECT_DOUBLE_EQ(r.get_pos().x(), 1.0) <<
      "FAIL: Bad position update for X: 45 degree trajectory";
  EXPECT_DOUBLE_EQ(r.get_pos().y(), 1.0) <<
      "FAIL: Bad position update for Y: 45 degree trajectory";

  rmb.UpdatePosition(&r, 1);
  EXPECT_DOUBLE_EQ(r.get_pos().x(), 2.0) <<
      "FAIL: Bad position update for X: 45 degree trajectory";
  EXPECT_DOUBLE_EQ(r.get_pos().y(), 2.0) <<
      "FAIL: Bad position update for Y: 45 degree trajectory";

  EXPECT_EQ(r.get_pos(), csci3081::Position(0, 0)) << "FAIL: Reset failure";

  rmb.UpdatePosition(&r, 10);
  EXPECT_DOUBLE_EQ(r.get_pos().x(), 5.0) <<
      "FAIL: Bad position update for X: 45 degree trajectory";
  EXPECT_DOUBLE_EQ(r.get_pos().y(), 5.0) <<
      "FAIL: Bad position update for Y: 45 degree trajectory";
}

TEST(ArenaMobileEntity, UpdatePosition225) {
  csci3081::robot_params params;
  params.pos = csci3081::Position(10, 10);
  csci3081::Robot r(&params);
  csci3081::RobotMotionBehavior rmb;
  r.heading_angle(225.0);
  r.speed(1.0);

  rmb.UpdatePosition(&r, 1);;
  EXPECT_DOUBLE_EQ(r.get_pos().x(), 9.0) <<
      "FAIL: Bad position update for X: 225 degree trajectory";
  EXPECT_DOUBLE_EQ(r.get_pos().y(), 9.0) <<
      "FAIL: Bad position update for Y: 225 degree trajectory";

  rmb.UpdatePosition(&r, 1);
  EXPECT_DOUBLE_EQ(r.get_pos().x(), 8.0) <<
      "FAIL: Bad position update for X: 225 degree trajectory";
  EXPECT_DOUBLE_EQ(r.get_pos().y(), 8.0) <<
      "FAIL: Bad position update for Y: 225 degree trajectory";

  EXPECT_EQ(r.get_pos(), csci3081::Position(10, 10)) << "FAIL: Reset failure";

  rmb.UpdatePosition(&r, 10);
  EXPECT_DOUBLE_EQ(r.get_pos().x(), 0.0) <<
      "FAIL: Bad position update for X: 225 degree trajectory";
  EXPECT_DOUBLE_EQ(r.get_pos().y(), 0.0) <<
      "FAIL: Bad position update for Y: 225 degree trajectory";
}

#endif /* PRIORIT1_TESTS */
